#!/bin/python3

import sys
import logging
import subprocess
import traceback
from email.message import EmailMessage
import ipaddress
from typing import Optional
from pathlib import Path

from requests import get

IPIFY_URL = 'https://api.ipify.org'
LAST_IP_FILE = Path.home() / ".lastip"

logger = logging.getLogger("WAN-IP-watcher")

def send_email_with_msmtp(subject: str, body: str) -> None:

    import os

    recipient = os.environ.get("WAN_IP_WATCHER_EMAIL")
    if not recipient:
        logger.error("WAN_IP_WATCHER_EMAIL environment variable not set")
        return

    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = "WAN IP Watcher"
    msg['To'] = recipient
    msg.set_content(body)

    try:
        subprocess.run(["msmtp", recipient], input=msg.as_bytes(), check=True)
        logger.info("Notification email sent via msmtp")
        return
    except subprocess.CalledProcessError as e:
        logger.error("Failed to send email via msmtp", exc_info=e)

def notify_ip_change(current_ip: str, last_ip: Optional[str]) -> None:
    subject = "WAN IP Address Changed"
    body = (
            f"WAN IP address changed\n\n"
            f"  {last_ip or 'None'} -> {current_ip}\n"
    ) 
    send_email_with_msmtp(subject, body)

def notify_failure(context: str, exc: Exception) -> None:
    subject = f"WAN IP Watcher Error: {context}"
    tb = "".join(traceback.format_exception(type(exc), exc, exc.__traceback__))
    body = (
            f"A failure occurred during '{context}'.\n\n"
            f"Exception: {type(exc).__name__}: {exc}\n\n"
            f"Traceback:\n{tb}"
    )
    send_email_with_msmtp(subject, body)

def setup_logging(debug=False) -> None:
    logger.setLevel(logging.DEBUG if debug else logging.INFO)

    # Default is to log to stderr so we switch to sdout and later will add
    # a file handler so we can log to stdout and a log file
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s: %(message)s"))
    logger.addHandler(handler)

def get_current_ip() -> str:
    response = get(IPIFY_URL)
    response.raise_for_status()
    ip = response.text.strip()
    logger.debug(f"Raw IP response: {ip}")

    # Raises an exception if this is no an IP address shape
    ipaddress.ip_address(ip)
    return ip

def get_last_ip() -> Optional[str]:

    if not LAST_IP_FILE.exists():
        # File doesn't exist - first run
        logger.info(f"Last IP file not found. Created last IP file at {LAST_IP_FILE}")
        LAST_IP_FILE.touch(exist_ok=True)
        # If the ~/.lastip had to be created, that's ok, we just indicate it with None
        return None
    else:
        # File exists so get the IP address and return it
        logger.debug("IP file found. Reading IP address.")
        ip = LAST_IP_FILE.read_text().strip()
        logger.debug(f"Raw IP from .lastip: {ip}")

    # Now that we actually have something, we verify it's shaped like an
    # IP address before we return it. It has to be valid at this point or its an
    # exception, since we already covered the case of the file not existing yet.
    ipaddress.ip_address(ip)
    return ip

def update_last_ip_file(current_ip) -> None:

    # This should never happen -  by the time this function is called, the stash file
    # will have already been created or been proven to exist
    if not LAST_IP_FILE.exists():
        raise FileNotFoundError(f"Expected {LAST_IP_FILE} to exist before writing, but it does not")

    # Trample the existing IP address with the new one
    LAST_IP_FILE.write_text(current_ip + "\n")

def main():

    # Initialize logging system and streams
    setup_logging(debug=True)

    # Get current IP address from some external monitor
    logger.debug(f"Obtaining current IP address from {IPIFY_URL}")
    try:
        current_ip = get_current_ip()
    except Exception as e:
        notify_failure("Failed to get current IP address", e)
        return 1
    logger.debug(f"Obtained current IP address: {current_ip}")

    # Get last IP address from local storage
    logger.debug(f"Obtaining last IP address from {LAST_IP_FILE}")
    try:
        last_ip = get_last_ip()
    except ValueError:
        logger.debug("Last IP file found but contents corrupt. Deleting.")
        Path.unlink(LAST_IP_FILE)
        last_ip = None
    except Exception as e:
        notify_failure("Failed to get last IP address", e)
        return 1
    logger.debug(f"Obtained last IP address: {last_ip}")

    # If we've reached this point without exceptions, current IP address
    # is valid and last IP address is either valid or None
    if current_ip == last_ip:
        logger.debug(f"WAN IP address unchanged")
        return 0

    # From here on, the rest of main() assumes we had an IP update
    logger.info(f"WAN IP address changed {last_ip} -> {current_ip}")

    # Update the local stash file
    logger.info(f"Updating {LAST_IP_FILE} with IP address: {current_ip}")
    try:
        update_last_ip_file(current_ip)
    except Exception as e:
        notify_failure("Failed to update local file with new IP address", e)
        return 1

    try:
        notify_ip_change(current_ip, last_ip)
    except Exception as e:
        logger.error("Failed to send IP change notification - vaya con dios!", exc_info=e)
        return 1

if __name__ == "__main__":
    sys.exit(main())

