#!/bin/bash

# Compile various Xilinx behavioral simulation libraries using 64-bit QuestaSim
#
# The general approach to third-party simulation of the Xilinx simulation
# libraries is to run the `compile_simlib` command with various arguments
# instructing Vivado where to find and execute the simulator of choice. For
# reasons I do not entirely understand, Vivado refuses to recognize my version
# of the simulator, probably because the version string does not exactly match
# what it expects to find.  The tools remain the same and one can build the
# simulation libraries by hand if they are so inclined.

script_name="$(realpath "${0}")"
scripts_dir="$(dirname "${script_name}")"
if ! source "${scripts_dir}/common.sh" >/dev/null 2>&1; then
    printf '%s\n' "Error: Could not import common functions" >&2
    exit 1
fi

if ! check_modelsim; then
    err "Could not find ModelSim tools in current PATH"
    exit 1
fi

# Not attempting to target multiple versions of Vivado, just want to automate as
# much of this as possible
vivado_version="2022.1"

# Need to clearly define the tool and the tool version (e.g., 24.2 vs 24.2s or
# student versions). In my experience, simulation libraries need to match the
# target simulator exactly. Playing fast and loose with tool versions, library
# versions, source versions is a recipe for disaster.
questa_version="22.2"
# This should really be determined automatically, but it's fine for now I
# suppose
sim_version="questa_fe"

# Root directory to place simulation libraries after compilation
lib_dir="lib"

# Location of Xilinx source directory, usually something containing a directory
# like `data/verilog/src/`.  Not all sources are in the same location (e.g.,
# XPM)
vhdl_src_dir="${TOOLS_ROOT}/Xilinx/Vivado/${vivado_version}/data/vhdl/src"
xpm_src_dir="${TOOLS_ROOT}/Xilinx/Vivado/${vivado_version}/data/ip/xpm"

# The files and order required to compile the various Xilinx libraries are
# entirely speculative, but are to some text extent inferred or described in
# UG900 in the section 'Using Xilinx Simulation Libraries'.
compile_unisims() {
    local unisim_dir
    unisim_dir="${1}"
    local unisim_vhdl_files
    local src_file

    # Xilinx (at least in 2024.1 tools) ships a list of files with the VHDL
    # source, so that's extremely useful. If this doesn't exist, then there's no
    # point in trying to proceed
    unisim_vhdl_files="${vhdl_src_dir}/unisims/primitive/vhdl_analyze_order"
    if [[ ! -f "${unisim_vhdl_files}" ]]; then
        err "Could not find source file list ${unisim_vhdl_files}"
        return 1
    fi

    # Delete the existing simulation library if it exists
    if [[ -d "${unisim_dir}" ]]; then
        rm -rf "${unisim_dir}"
    fi

    # Create an empty UNISIM library
    vlib "${unisim_dir}"
    vmap UNISIM "${unisim_dir}"

    # From UG900 on UNISIM library
    vcom -work UNISIM "${vhdl_src_dir}/unisims/unisim_VCOMP.vhd"
    vcom -work UNISIM "${vhdl_src_dir}/unisims/unisim_VPKG.vhd"
    # These will generate a warning about redefinition of symbols from the
    # earleir two that were compiled and can be ignored. These HAVE to be
    # compiled after the previous two
    vcom -work UNISIM -suppress 1615 "${vhdl_src_dir}/unisims/retarget_VCOMP.vhd"
    vcom -work UNISIM -suppress 1615 "${vhdl_src_dir}/unisims/unisim_retarget_VCOMP.vhd"

    # Iterate through the VHDL source files and compile them in the order that
    # Xilinx presumably expects us to
    while IFS= read -r line; do
        src_file="${vhdl_src_dir}/unisims/primitive/${line}"
        if [[ ! -f "${src_file}" ]]; then
            err "VHDL source ${src_file} missing."
            return 1
        else
            vcom -work UNISIM "${src_file}"
        fi
    done < "${unisim_vhdl_files}"

    return 0
}

compile_unimacro() {
    local unimacro_dir
    unimacro_dir="${1}"
    local unimacro_vhdl_files
    local src_file

    unimacro_vhdl_files="${vhdl_src_dir}/unimacro/vhdl_analyze_order"
    if [[ ! -f "${unimacro_vhdl_files}" ]]; then
        err "Could not find source file list ${unimacro_vhdl_files}"
        return 1
    fi

    # Delete the existing simulation library if it exists
    if [[ -d "${unimacro_dir}" ]]; then
        rm -rf "${unimacro_dir}"
    fi

    # Create an empty UNIMACRO library
    vlib "${unimacro_dir}"
    vmap UNIMACRO "${unimacro_dir}"

    # From UG900 on UNIMACRO library
    vcom -work UNIMACRO "${vhdl_src_dir}/unimacro/unimacro_VCOMP.vhd"

    while IFS= read -r line; do
        src_file="${vhdl_src_dir}/unimacro/${line}"
        if [[ ! -f "${src_file}" ]]; then
            err "VHDL source ${src_file} missing."
            return 1
        else
            vcom -work UNIMACRO "${src_file}"
        fi
    done < "${unimacro_vhdl_files}"

    return 0
}

# Note that the XPM macros require SystemVerilog support to compile
compile_xpm() {
    local xpm_dir
    xpm_dir="${1}"

    if [[ -d "${xpm_dir}" ]]; then
        rm -rf "${xpm_dir}"
    fi

    # Create an empty XPM library
    vlib "${xpm_dir}"
    vmap xpm "${xpm_dir}"

    # VHDL component definitions
    vcom -work xpm "${xpm_src_dir}/xpm_VCOMP.vhd"
    # XPM FIFO macros
    vlog -work xpm -sv "${xpm_src_dir}/xpm_fifo/hdl/xpm_fifo.sv"
    # XPM memory macros
    vlog -work xpm -sv "${xpm_src_dir}/xpm_memory/hdl/xpm_memory.sv"
    # XPM CDC macros
    vlog -work xpm -sv "${xpm_src_dir}/xpm_cdc/hdl/xpm_cdc.sv"
}

# Make sure we have someplace to write to
mkdir -p "${lib_dir}"
if [[ ! -w "${lib_dir}" ]]; then
    err "Cannot write to ${lib_dir}"
    exit 1
fi

# The vlib command refuses to create libraries in locations that don't exist
# yet, so create it first
dest_dir="${lib_dir}/${vivado_version}/${sim_version}/${questa_version}"
mkdir -p "${dest_dir}"

# Compile Xilinx libraries and put the build logs in the root of the destination
# directory
compile_unisims "${dest_dir}/UNISIM" | tee "${dest_dir}/build_unisim_$(timestamp).log"
compile_unimacro "${dest_dir}/UNIMACRO" | tee "${dest_dir}/build_unimacro_$(timestamp).log"
compile_xpm "${dest_dir}/xpm" | tee "${dest_dir}/build_xpm_$(timestamp).log"

