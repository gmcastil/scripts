#!/bin/bash

# Starts the Vivado hardware manager in daemon mode as a background process, if
# one isn't already running. This allows the hardware manager of other Vivado
# instances on the network to connect remotely to boards that are physically
# connected to another machine (e.g., one in a laboratory).
#
# As an example, consider the case of an FPGA development board connected via a
# USB to JTAG programming pod on a lab machine named Alice.  Now imagine that
# a remote development machine run by Bob wants to program the FPGA.  Alice
# would run the `start_hw_server` script, wait a couple of seconds, and then
# identify the IP address, hostname, and available ports that the hardware
# manager is now running on her machine.  She could use `pgrep` to identify the
# process, and then use something like `netstat` or `ss` to determine which
# ports are in use.  Bob would then open the hardware manager from his machine,
# add Alice's host to the list of targets to look for, and the Digilent board
# should appear as if it were connected locally to his machine.
#
# This script allows one to remotely start the hardware manager on Alice's
# machine, immediately identify when it's run whether there is already an
# instance of `hw_server` running, and ultimately, what IP address and ports it
# is available on.  So, all that is needed on Alice's machine, assuming the
# firewall is appropriately configured, is SSH access, the Xilinx tools, and the
# cable drivers installed (common oversight).

# shellcheck disable=SC2181

err() {
    local msg
    msg="${1}"
    printf 'Error: %s\n' "${msg}" >&2
    return 0
}

get_hw_server_pid() {
    local pid
    pid=$(pgrep -f 'hw_server -d')
    if [[ "$?" -eq 0 ]]; then
        printf '%s' "${pid}"
        return 0
    else
        return 1
    fi
}

show_hw_server_stat() {
    local pid
    pid="${1}"

    printf 'Process ID: %s\n' "${pid}"

    # The hardware manager, at least the way it is begin launched, listens to
    # all host interfaces, so just dump them all out here.  There might be a way
    # to stipulate which network interfaces it runs on, but I haven't done that
    # because it's typically running in a VM and I'm constantly swapping out
    # network devices and MAC addresses
    printf '\n'
    printf 'Available interfaces:\n'
    for iface in $(hostname -I | tr ' ' '\n'); do
        printf '  %-20s\n' "${iface}"
    done

    # Show ports that it is listening on
    printf '\n'
    printf 'Listening on:\n'
    tcp_ports="$(ss -tlnp | grep "${pid}" | awk '{split($4, a, ":"); print a[2]}')"
    for port in ${tcp_ports}; do
        printf '  tcp: %s\n' "${port}"
    done
    udp_ports="$(ss -ulnp | grep "${pid}" | awk '{split($4, a, ":"); print a[2]}')"
    for port in ${udp_ports}; do
        printf '  udp: %s\n' "${port}"
    done
    printf '\n'
}

# This needs to be run as a command, not sourced into a running subshell
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    printf '%s\n' "Script needs to be run as a command" >&2
    return 1
fi

# Make sure that the hardware server startup script we're going to fire
# up Vivado with exists
script_name="$(realpath "${0}")"
scripts_dir="$(dirname "${script_name}")"
hw_server_tcl="${scripts_dir}/start_hw_server.tcl"

if [[ ! -f "${hw_server_tcl}" ]]; then
    err "Could not find 'start_hw_server.tcl'. Cannot start hardware server."
    exit 1
fi

# Specify which Vivado version we are using
vivado_version=2024.2
vivado_root="${TOOLS_ROOT}/Xilinx/Vivado/${vivado_version}"

# Check if an existing Vivado hardware daemon is already running
hw_server_pid="$(get_hw_server_pid)"
if [[ "$?" -eq 0 ]]; then
    err "Hardware server already running"
    printf '\n'
    show_hw_server_stat "${hw_server_pid}"
    exit 1
fi

# Import Xilinx settings to allow us to start Vivado
if ! source "${vivado_root}/settings64.sh" >/dev/null 2>&1; then
    err "Could not source ${vivado_root}/settings64.sh. Check TOOLS_ROOT."
    exit 1
fi

# Make sure Vivado is in the PATH now
command -v vivado >/dev/null 2>&1 || \
    { err "Could not find vivado in current PATH."; exit 1; }

printf 'Starting hardware server...' >&1
# Launch the hardware server in daemon mode without leaving detritus behind
vivado -mode batch -notrace -nolog -nojournal -source "${hw_server_tcl}" >/dev/null 2>&1

hw_server_pid="$(get_hw_server_pid)"
if [[ "$?" -ne 0 ]]; then
    printf 'FAIL\n\n'
    err "Could not start hardware server"
    exit 1
else
    printf 'OK\n'
    show_hw_server_stat "$(get_hw_server_pid)"
    exit 0
fi

